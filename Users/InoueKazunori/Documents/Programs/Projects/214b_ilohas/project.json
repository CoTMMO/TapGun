[{"diskText":"ラッパーをかぶせる関数\n\nAnimate3D::create\n第2 第3 引数のパラメーターを秒数指定からフレーム数指定に変更\n","text":"ラッパーをかぶせる関数\n\nAnimate3D::create\n第2 第3 引数のパラメーターを秒数指定からフレーム数指定に変更\n","active":false,"path":"/Users/InoueKazunori/Documents/Programs/Projects/214b_ilohas/rapper.txt","scroll":0.2706766917293233,"cursor":{"row":4,"column":0}},{"diskText":"#include \"AppDelegate.h\"\r\n\r\n#if (CC_TARGET_PLATFORM == CC_PLATFORM_IOS)\r\n#include \"TestScene.h\"\r\n#else\r\n#include \"Scene/TestScene.h\"\r\n#endif\r\n\r\nUSING_NS_CC;\r\n\r\nAppDelegate::AppDelegate()\r\n{\r\n}\r\n\r\nAppDelegate::~AppDelegate() \r\n{\r\n}\r\n\r\n//if you want a different context,just modify the value of glContextAttrs\r\n//it will takes effect on all platforms\r\nvoid AppDelegate::initGLContextAttrs()\r\n{\r\n\t//set OpenGL context attributions,now can only set six attributions:\r\n\t//red,green,blue,alpha,depth,stencil\r\n\tGLContextAttrs glContextAttrs = {8, 8, 8, 8, 24, 8};\r\n\r\n\tGLView::setGLContextAttrs(glContextAttrs);\r\n}\r\n\r\nbool AppDelegate::applicationDidFinishLaunching()\r\n{\r\n\t// initialize director\r\n\tauto director = Director::getInstance();\r\n\tauto glview = director->getOpenGLView();\r\n\tif(!glview)\r\n\t{\r\n\t\tglview = GLViewImpl::create(\"My Game\");\r\n\t\tdirector->setOpenGLView(glview);\r\n\t}\r\n\r\n\t// turn on display FPS\r\n\tdirector->setDisplayStats(true);\r\n\t\r\n\t// window size set\r\n\tglview->setDesignResolutionSize( 1280, 720, ResolutionPolicy::SHOW_ALL);\r\n\r\n\t// set FPS. the default value is 1.0/60 if you don't call this\r\n\tdirector->setAnimationInterval(1.0 / 60);\r\n\t\r\n\t// create a scene. it's an autorelease object\r\n\tauto scene = TapGun::Test::createScene();\r\n\r\n\t// run\r\n\tdirector->runWithScene(scene);\r\n\r\n\treturn true;\r\n}\r\n\r\n// This function will be called when the app is inactive. When comes a phone call,it's be invoked too\r\nvoid AppDelegate::applicationDidEnterBackground()\r\n{\r\n\tDirector::getInstance()->stopAnimation();\r\n\r\n\t// if you use SimpleAudioEngine, it must be pause\r\n\t// SimpleAudioEngine::getInstance()->pauseBackgroundMusic();\r\n}\r\n\r\n// this function will be called when the app is active again\r\nvoid AppDelegate::applicationWillEnterForeground()\r\n{\r\n\tDirector::getInstance()->startAnimation();\r\n\r\n\t// if you use SimpleAudioEngine, it must resume here\r\n\t// SimpleAudioEngine::getInstance()->resumeBackgroundMusic();\r\n}\r\n","text":"#include \"AppDelegate.h\"\r\n\r\n#if (CC_TARGET_PLATFORM == CC_PLATFORM_IOS)\r\n#include \"TestScene.h\"\r\n#else\r\n#include \"Scene/TestScene.h\"\r\n#endif\r\n\r\nUSING_NS_CC;\r\n\r\nAppDelegate::AppDelegate()\r\n{\r\n}\r\n\r\nAppDelegate::~AppDelegate() \r\n{\r\n}\r\n\r\n//if you want a different context,just modify the value of glContextAttrs\r\n//it will takes effect on all platforms\r\nvoid AppDelegate::initGLContextAttrs()\r\n{\r\n\t//set OpenGL context attributions,now can only set six attributions:\r\n\t//red,green,blue,alpha,depth,stencil\r\n\tGLContextAttrs glContextAttrs = {8, 8, 8, 8, 24, 8};\r\n\r\n\tGLView::setGLContextAttrs(glContextAttrs);\r\n}\r\n\r\nbool AppDelegate::applicationDidFinishLaunching()\r\n{\r\n\t// initialize director\r\n\tauto director = Director::getInstance();\r\n\tauto glview = director->getOpenGLView();\r\n\tif(!glview)\r\n\t{\r\n\t\tglview = GLViewImpl::create(\"My Game\");\r\n\t\tdirector->setOpenGLView(glview);\r\n\t}\r\n\r\n\t// turn on display FPS\r\n\tdirector->setDisplayStats(true);\r\n\t\r\n\t// window size set\r\n\tglview->setDesignResolutionSize( 1280, 720, ResolutionPolicy::SHOW_ALL);\r\n\r\n\t// set FPS. the default value is 1.0/60 if you don't call this\r\n\tdirector->setAnimationInterval(1.0 / 60);\r\n\t\r\n\t// create a scene. it's an autorelease object\r\n\tauto scene = TapGun::Test::createScene();\r\n\r\n\t// run\r\n\tdirector->runWithScene(scene);\r\n\r\n\treturn true;\r\n}\r\n\r\n// This function will be called when the app is inactive. When comes a phone call,it's be invoked too\r\nvoid AppDelegate::applicationDidEnterBackground()\r\n{\r\n\tDirector::getInstance()->stopAnimation();\r\n\r\n\t// if you use SimpleAudioEngine, it must be pause\r\n\t// SimpleAudioEngine::getInstance()->pauseBackgroundMusic();\r\n}\r\n\r\n// this function will be called when the app is active again\r\nvoid AppDelegate::applicationWillEnterForeground()\r\n{\r\n\tDirector::getInstance()->startAnimation();\r\n\r\n\t// if you use SimpleAudioEngine, it must resume here\r\n\t// SimpleAudioEngine::getInstance()->resumeBackgroundMusic();\r\n}\r\n","active":false,"path":"/Users/InoueKazunori/Documents/Programs/Projects/214b_ilohas/Classes/AppDelegate.cpp","scroll":1.4081317550180135,"cursor":{"row":0,"column":0}},{"diskText":"'global':\n  'editor':\n    'tabLength': 4\n    'showInvisibles': true\n    'fontFamily': '\"Ricty Diminished\"'\n    'fontSize': 14\n    'invisibles':\n      'cr': '↵'\n      'eol': ' '\n      'space': '　'\n    'showIndentGuide': true\n    'scrollPastEnd': true\n    'zoomFontWhenCtrlScrolling': true\n  'recent-files':\n    'updated': false\n  'exception-reporting':\n    'userId': 'afe3d389-56f3-920e-518c-e2c5a66130fb'\n  'welcome':\n    'showOnStartup': false\n  'atom-beautify':\n    '_analyticsUserId': '904782bc-0aa7-4803-bdaf-91ec87cdbac6'\n  'autocomplete-plus':\n    'includeCompletionsFromAllBuffers': true\n  'save-session':\n    'dataSaveFolder': '/Users/InoueKazunori/Documents/Programs/Projects/214b_ilohas'\n    'project': '/Users/InoueKazunori/Documents/Programs/Projects/214b_ilohas'\n    'windowX': 0\n    'windowY': 23\n    'windowWidth': 1280\n    'windowHeight': 714\n  'core':\n    'projectHome': '/Users/InoueKazunori/Documents/Programs/Projects'\n    'themes': [\n      'atom-dark-ui'\n      'visual-studio-dark-syntax'\n    ]\n    'disabledPackages': [\n      'atom-beautify'\n    ]\n","text":"'global':\n  'editor':\n    'tabLength': 4\n    'showInvisibles': true\n    'fontFamily': '\"Ricty Diminished\"'\n    'fontSize': 14\n    'invisibles':\n      'cr': '↵'\n      'eol': ' '\n      'space': '　'\n    'showIndentGuide': true\n    'scrollPastEnd': true\n    'zoomFontWhenCtrlScrolling': true\n  'recent-files':\n    'updated': false\n  'exception-reporting':\n    'userId': 'afe3d389-56f3-920e-518c-e2c5a66130fb'\n  'welcome':\n    'showOnStartup': false\n  'atom-beautify':\n    '_analyticsUserId': '904782bc-0aa7-4803-bdaf-91ec87cdbac6'\n  'autocomplete-plus':\n    'includeCompletionsFromAllBuffers': true\n  'save-session':\n    'dataSaveFolder': '/Users/InoueKazunori/Documents/Programs/Projects/214b_ilohas'\n    'project': '/Users/InoueKazunori/Documents/Programs/Projects/214b_ilohas'\n    'windowX': 0\n    'windowY': 23\n    'windowWidth': 1280\n    'windowHeight': 714\n  'core':\n    'projectHome': '/Users/InoueKazunori/Documents/Programs/Projects'\n    'themes': [\n      'atom-dark-ui'\n      'visual-studio-dark-syntax'\n    ]\n    'disabledPackages': [\n      'atom-beautify'\n    ]\n","active":false,"path":"/Users/InoueKazunori/.atom/config.cson","scroll":1.111969111969112,"cursor":{"row":24,"column":84}},{"diskText":"#/****************************************************************************\n# Copyright (c) 2013-2014 cocos2d-x.org\n#\n# http://www.cocos2d-x.org\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n# ****************************************************************************/\ncmake_policy(SET CMP0017 NEW)\n\ncmake_minimum_required(VERSION 2.8)\n\nset(APP_NAME MyGame)\nproject (${APP_NAME})\n\nset(COCOS2D_ROOT ${CMAKE_SOURCE_DIR}/cocos2d)\n\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${COCOS2D_ROOT}/cmake/Modules/\")\ninclude(CocosBuildHelpers)\n\n# libcocos2d\nset(BUILD_CPP_TESTS OFF CACHE BOOL \"turn off build cpp-tests\")\nset(BUILD_LUA_LIBS OFF CACHE BOOL \"turn off build lua-tests\")\nadd_subdirectory(${COCOS2D_ROOT})\n\n# Some macro definitions\nif(WINDOWS)\n  if(BUILD_SHARED_LIBS)\n    ADD_DEFINITIONS (-D_USRDLL -D_EXPORT_DLL_ -D_USEGUIDLL -D_USREXDLL -D_USRSTUDIODLL)\n  else()\n    ADD_DEFINITIONS (-DCC_STATIC)\n  endif()\n\n  ADD_DEFINITIONS (-DCOCOS2DXWIN32_EXPORTS -D_WINDOWS -DWIN32 -D_WIN32)\n  set(PLATFORM_FOLDER win32)\nelseif(MACOSX OR APPLE)\n  ADD_DEFINITIONS (-DCC_TARGET_OS_MAC)\n  ADD_DEFINITIONS (-DUSE_FILE32API)\n  set(PLATFORM_FOLDER mac)\nelseif(LINUX)\n  ADD_DEFINITIONS(-DLINUX)\n  set(PLATFORM_FOLDER linux)\nelseif(ANDROID)\n  ADD_DEFINITIONS (-DUSE_FILE32API)\n  set(PLATFORM_FOLDER android)\nelse()\n  message( FATAL_ERROR \"Unsupported platform, CMake will exit\" )\nendif()\n\n\n# Compiler options\nif(MSVC)\n  ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS\n                  -wd4251 -wd4244 -wd4334 -wd4005 -wd4820 -wd4710\n                  -wd4514 -wd4056 -wd4996 -wd4099)\nelse()\n  set(CMAKE_C_FLAGS_DEBUG \"-g -Wall -DCOCOS2D_DEBUG=1\")\n  set(CMAKE_CXX_FLAGS_DEBUG ${CMAKE_C_FLAGS_DEBUG})\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fno-exceptions -std=c99\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-exceptions -std=c++11 -Wno-deprecated-declarations -Wno-reorder\")\n  if(CLANG)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -stdlib=libc++\")\n  endif()\nendif(MSVC)\n\n\n\nset(PLATFORM_SPECIFIC_SRC)\nset(PLATFORM_SPECIFIC_HEADERS)\nif(MACOSX OR APPLE)\nset(PLATFORM_SPECIFIC_SRC\n  proj.ios_mac/ios/main.m\n  proj.ios_mac/ios/RootViewController.mm\n  proj.ios_mac/ios/AppController.mm\n)\nset(PLATFORM_SPECIFIC_HEADERS\n  proj.ios_mac/ios/RootViewController.h\n  proj.ios_mac/ios/AppController.h\n)\nelseif(LINUX) #assume linux\nset(PLATFORM_SPECIFIC_SRC\n  proj.linux/main.cpp\n)\nelseif ( WIN32 )\nset(PLATFORM_SPECIFIC_SRC\n  proj.win32/main.cpp\n)\nset(PLATFORM_SPECIFIC_HEADERS\n  proj.win32/main.h\n  proj.win32/resource.h\n)\nendif()\n\ninclude_directories(\n  /usr/local/include/GLFW\n  /usr/include/GLFW\n  ${COCOS2D_ROOT}/cocos\n  Classes\n)\n\nset(GAME_SRC\n  Classes/AppDelegate.cpp\n  Classes/HelloWorldScene.cpp\n  ${PLATFORM_SPECIFIC_SRC}\n)\n\nset(GAME_HEADERS\n  Classes/AppDelegate.h\n  Classes/HelloWorldScene.h\n  ${PLATFORM_SPECIFIC_HEADERS}\n)\n\nif(GAME_HEADERS)\nadd_executable(${APP_NAME} ${GAME_SRC} ${GAME_HEADERS})\nelse()\nadd_executable(${APP_NAME} ${GAME_SRC})\nendif()\n\ntarget_link_libraries(${APP_NAME} cocos2d)\n\nset(APP_BIN_DIR \"${CMAKE_BINARY_DIR}/bin\")\n\nset_target_properties(${APP_NAME} PROPERTIES\n     RUNTIME_OUTPUT_DIRECTORY  \"${APP_BIN_DIR}\")\n\nif ( WIN32 )\n  #also copying dlls to binary directory for the executable to run\n  pre_build(${APP_NAME}\n    COMMAND ${CMAKE_COMMAND} -E remove_directory ${APP_BIN_DIR}/Resources\n    COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/Resources ${APP_BIN_DIR}/Resources\n    COMMAND ${CMAKE_COMMAND} -E copy ${COCOS2D_ROOT}/external/win32-specific/gles/prebuilt/glew32.dll ${APP_BIN_DIR}/${CMAKE_BUILD_TYPE}\n\tCOMMAND ${CMAKE_COMMAND} -E copy ${COCOS2D_ROOT}/external/win32-specific/zlib/prebuilt/zlib1.dll ${APP_BIN_DIR}/${CMAKE_BUILD_TYPE}\n\t)\nelse()\n  pre_build(${APP_NAME}\n    COMMAND ${CMAKE_COMMAND} -E remove_directory ${APP_BIN_DIR}/Resources\n    COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/Resources ${APP_BIN_DIR}/Resources\n    )\n\nendif()\n","text":"#/****************************************************************************\n# Copyright (c) 2013-2014 cocos2d-x.org\n#\n# http://www.cocos2d-x.org\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n# ****************************************************************************/\ncmake_policy(SET CMP0017 NEW)\n\ncmake_minimum_required(VERSION 2.8)\n\nset(APP_NAME MyGame)\nproject (${APP_NAME})\n\nset(COCOS2D_ROOT ${CMAKE_SOURCE_DIR}/cocos2d)\n\nset(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} \"${COCOS2D_ROOT}/cmake/Modules/\")\ninclude(CocosBuildHelpers)\n\n# libcocos2d\nset(BUILD_CPP_TESTS OFF CACHE BOOL \"turn off build cpp-tests\")\nset(BUILD_LUA_LIBS OFF CACHE BOOL \"turn off build lua-tests\")\nadd_subdirectory(${COCOS2D_ROOT})\n\n# Some macro definitions\nif(WINDOWS)\n  if(BUILD_SHARED_LIBS)\n    ADD_DEFINITIONS (-D_USRDLL -D_EXPORT_DLL_ -D_USEGUIDLL -D_USREXDLL -D_USRSTUDIODLL)\n  else()\n    ADD_DEFINITIONS (-DCC_STATIC)\n  endif()\n\n  ADD_DEFINITIONS (-DCOCOS2DXWIN32_EXPORTS -D_WINDOWS -DWIN32 -D_WIN32)\n  set(PLATFORM_FOLDER win32)\nelseif(MACOSX OR APPLE)\n  ADD_DEFINITIONS (-DCC_TARGET_OS_MAC)\n  ADD_DEFINITIONS (-DUSE_FILE32API)\n  set(PLATFORM_FOLDER mac)\nelseif(LINUX)\n  ADD_DEFINITIONS(-DLINUX)\n  set(PLATFORM_FOLDER linux)\nelseif(ANDROID)\n  ADD_DEFINITIONS (-DUSE_FILE32API)\n  set(PLATFORM_FOLDER android)\nelse()\n  message( FATAL_ERROR \"Unsupported platform, CMake will exit\" )\nendif()\n\n\n# Compiler options\nif(MSVC)\n  ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS -D_SCL_SECURE_NO_WARNINGS\n                  -wd4251 -wd4244 -wd4334 -wd4005 -wd4820 -wd4710\n                  -wd4514 -wd4056 -wd4996 -wd4099)\nelse()\n  set(CMAKE_C_FLAGS_DEBUG \"-g -Wall -DCOCOS2D_DEBUG=1\")\n  set(CMAKE_CXX_FLAGS_DEBUG ${CMAKE_C_FLAGS_DEBUG})\n  set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -fno-exceptions -std=c99\")\n  set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fno-exceptions -std=c++11 -Wno-deprecated-declarations -Wno-reorder\")\n  if(CLANG)\n    set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -stdlib=libc++\")\n  endif()\nendif(MSVC)\n\n\n\nset(PLATFORM_SPECIFIC_SRC)\nset(PLATFORM_SPECIFIC_HEADERS)\nif(MACOSX OR APPLE)\nset(PLATFORM_SPECIFIC_SRC\n  proj.ios_mac/ios/main.m\n  proj.ios_mac/ios/RootViewController.mm\n  proj.ios_mac/ios/AppController.mm\n)\nset(PLATFORM_SPECIFIC_HEADERS\n  proj.ios_mac/ios/RootViewController.h\n  proj.ios_mac/ios/AppController.h\n)\nelseif(LINUX) #assume linux\nset(PLATFORM_SPECIFIC_SRC\n  proj.linux/main.cpp\n)\nelseif ( WIN32 )\nset(PLATFORM_SPECIFIC_SRC\n  proj.win32/main.cpp\n)\nset(PLATFORM_SPECIFIC_HEADERS\n  proj.win32/main.h\n  proj.win32/resource.h\n)\nendif()\n\ninclude_directories(\n  /usr/local/include/GLFW\n  /usr/include/GLFW\n  ${COCOS2D_ROOT}/cocos\n  Classes\n)\n\nset(GAME_SRC\n  Classes/AppDelegate.cpp\n  Classes/HelloWorldScene.cpp\n  ${PLATFORM_SPECIFIC_SRC}\n)\n\nset(GAME_HEADERS\n  Classes/AppDelegate.h\n  Classes/HelloWorldScene.h\n  ${PLATFORM_SPECIFIC_HEADERS}\n)\n\nif(GAME_HEADERS)\nadd_executable(${APP_NAME} ${GAME_SRC} ${GAME_HEADERS})\nelse()\nadd_executable(${APP_NAME} ${GAME_SRC})\nendif()\n\ntarget_link_libraries(${APP_NAME} cocos2d)\n\nset(APP_BIN_DIR \"${CMAKE_BINARY_DIR}/bin\")\n\nset_target_properties(${APP_NAME} PROPERTIES\n     RUNTIME_OUTPUT_DIRECTORY  \"${APP_BIN_DIR}\")\n\nif ( WIN32 )\n  #also copying dlls to binary directory for the executable to run\n  pre_build(${APP_NAME}\n    COMMAND ${CMAKE_COMMAND} -E remove_directory ${APP_BIN_DIR}/Resources\n    COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/Resources ${APP_BIN_DIR}/Resources\n    COMMAND ${CMAKE_COMMAND} -E copy ${COCOS2D_ROOT}/external/win32-specific/gles/prebuilt/glew32.dll ${APP_BIN_DIR}/${CMAKE_BUILD_TYPE}\n\tCOMMAND ${CMAKE_COMMAND} -E copy ${COCOS2D_ROOT}/external/win32-specific/zlib/prebuilt/zlib1.dll ${APP_BIN_DIR}/${CMAKE_BUILD_TYPE}\n\t)\nelse()\n  pre_build(${APP_NAME}\n    COMMAND ${CMAKE_COMMAND} -E remove_directory ${APP_BIN_DIR}/Resources\n    COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/Resources ${APP_BIN_DIR}/Resources\n    )\n\nendif()\n","active":false,"path":"/Users/InoueKazunori/Documents/Programs/Projects/214b_ilohas/CMakeLists.txt","scroll":1.6600650310375407,"cursor":{"row":0,"column":0}}]